// Generated by CoffeeScript 1.8.0
'use strict';
var Stars, Utils;

Node.prototype.prependChild = function(el) {
  return this.childNodes[1] && this.insertBefore(el, this.childNodes[1]) || this.appendChild(el);
};

Utils = {
  $: function(id) {
    return document.getElementById(id);
  },
  addClassName: function(el, name) {
    if (!this.hasClassName(el, name)) {
      return el.className = el.className ? [el.className, name].join(' ') : name;
    }
  },
  bind: function(el, type, handler) {
    var e;
    try {
      if (el.addEventListener) {
        return el.addEventListener(type, handler, false);
      } else if (el.attachEvent) {
        return el.attachEvent("on" + type, handler);
      }
    } catch (_error) {
      e = _error;
    }
  },
  hasClassName: function(el, name) {
    return new RegExp("(?:^|\\s+)" + name + "(?:\\s+|$)").test(el != null ? el.className : void 0);
  },
  HTTPGet: function(url, params, cb) {
    var param, req, value, _params;
    if (params == null) {
      params = {};
    }
    if (window.XMLHttpRequest) {
      req = new XMLHttpRequest();
    } else if (window.ActiveXObject) {
      req = new ActiveXObject('MSXML2.XMLHTTP.3.0');
    }
    if (req != null) {
      req.onreadystatechange = function() {
        if (req.readyState === 4 && (cb != null)) {
          return cb(req.responseText);
        }
      };
      _params = [];
      for (param in params) {
        value = params[param];
        _params.push("" + param + "=" + (encodeURIComponent(value)));
      }
      req.open('GET', "" + url + "?" + (_params.join('&')), true);
      return req.send(null);
    }
  },
  randomID: function() {
    return Math.random().toString(36).substr(2, 5);
  },
  removeClassName: function(el, name) {
    var c;
    if (this.hasClassName(el, name)) {
      c = el.className;
      return el.className = c.replace(new RegExp("(?:^|\\s+)" + name + "(?:\\s+|$)", 'g'), '');
    }
  },
  setTimeout: function(t, cb) {
    return window.setTimeout(cb, t);
  },
  setInterval: function(t, cb) {
    return window.setInterval(cb, t);
  }
};

Stars = (function() {
  function Stars() {
    this.pathname = window.location.pathname;
    this.instanceID = Utils.randomID();
    this.githubUsername = null;
    this.getGithubUsername((function(_this) {
      return function() {
        if (_this.pathname.replace('/', '') === _this.githubUsername) {
          return _this.init();
        }
      };
    })(this));
  }

  Stars.prototype.init = function() {
    this.setBindings();
    this.getLocation();
    if (this.inStarred) {
      this.removeSelected();
      this.renderContent();
    }
    return this.getButton();
  };

  Stars.prototype.setBindings = function() {
    var tab, _i, _len, _ref, _results;
    _ref = document.getElementsByClassName('tabnav-tab') || [];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tab = _ref[_i];
      _results.push(Utils.bind(tab, 'click', (function(_this) {
        return function(e) {
          if (tab.getAttribute('href').match(/starred/) != null) {
            return _this.renderButton();
          }
        };
      })(this)));
    }
    return _results;
  };

  Stars.prototype.getLocation = function() {
    this.inStarred = window.location.search.match(/starred/) != null;
    if (!this.inStarred) {
      this.renderButton();
    }
    return Utils.setTimeout(2000, (function(_this) {
      return function() {
        return _this.getLocation();
      };
    })(this));
  };

  Stars.prototype.getGithubUsername = function(cb) {
    return chrome.storage.local.get('githubUsername', (function(_this) {
      return function(data) {
        if (data != null ? data.githubUsername : void 0) {
          _this.githubUsername = data.githubUsername;
        } else {
          console.log('no set githubUsername');
        }
        return typeof cb === "function" ? cb() : void 0;
      };
    })(this));
  };

  Stars.prototype.removeSelected = function() {
    var allTabs, tab, _i, _len, _ref, _results;
    allTabs = document.getElementsByClassName('tabnav-tab');
    _results = [];
    for (_i = 0, _len = allTabs.length; _i < _len; _i++) {
      tab = allTabs[_i];
      if (((_ref = tab.classList) != null ? _ref[1] : void 0) === 'selected') {
        _results.push(tab.classList.remove('selected'));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Stars.prototype.getButton = function() {
    if (document.getElementById(this.instanceID) == null) {
      this.renderButton();
    }
    return Utils.setTimeout(2000, (function(_this) {
      return function() {
        return _this.getButton();
      };
    })(this));
  };

  Stars.prototype.renderButton = function() {
    var a, span, text, _ref;
    if (document.getElementById(this.instanceID) == null) {
      a = document.createElement('a');
      a.setAttribute('id', this.instanceID);
      Utils.addClassName(a, 'tabnav-tab');
      if (this.inStarred) {
        Utils.addClassName(a, 'selected');
      }
      a.setAttribute('href', "" + this.pathname + "?tab=starred");
      span = document.createElement('span');
      Utils.addClassName(span, 'octicon octicon-star');
      a.appendChild(span);
      text = document.createTextNode(' Starred');
      a.appendChild(text);
      Utils.bind(a, 'click', (function(_this) {
        return function(e) {
          if (e != null) {
            if (typeof e.preventDefault === "function") {
              e.preventDefault();
            }
          }
          if (!_this.inStarred) {
            return window.location = "" + _this.pathname + "?tab=starred";
          }
        };
      })(this));
      return (_ref = document.getElementsByClassName('tabnav-tabs')) != null ? _ref[0].appendChild(a) : void 0;
    } else {
      return Utils.removeClassName(document.getElementById(this.instanceID), 'selected');
    }
  };

  Stars.prototype.renderContent = function() {
    var message, params, strong, tabContent, ul, _ref;
    tabContent = (_ref = document.getElementsByClassName('tab-content')) != null ? _ref[0] : void 0;
    tabContent.innerHTML = '';
    if (!this.githubUsername) {
      message = document.createTextNode('Please configure your Github username on ');
      strong = document.createElement('strong');
      strong.innerHTML = 'Preferences &raquo; Extensions &raquo; Github stars';
      message.appendChild(strong);
      return tabContent.appendChild(message);
    } else {
      ul = document.createElement('ul');
      Utils.addClassName(ul, 'repo-list');
      params = {
        per_page: 9999999
      };
      return Utils.HTTPGet("https://api.github.com/users/" + this.githubUsername + "/starred", params, (function(_this) {
        return function(data) {
          var options, repo, repository, _i, _len, _ref1;
          if (data != null) {
            data = JSON.parse(data);
            _ref1 = data || [];
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              repo = _ref1[_i];
              options = {
                description: repo.description || '',
                name: repo.name || '',
                owner: repo.owner.login || '',
                ownerURL: repo.owner.html_url || '',
                url: repo.html_url || ''
              };
              repository = _this.createRepositoryElement(options);
              ul.appendChild(repository);
            }
            return tabContent.appendChild(ul);
          } else {
            message = _this.getMessage('You are not set star to any repository yet.');
            return tabContent.appendChild(message);
          }
        };
      })(this));
    }
  };

  Stars.prototype.getMessage = function(message, type) {
    var div;
    if (type == null) {
      type = 'warn';
    }
    div = document.createElement('div');
    div.setAttribute('class', "flash flash-" + type);
    div.innerHTML = message || '';
    return div;
  };

  Stars.prototype.createRepositoryElement = function(options) {
    var description, name, nameURL, owner, ownerURL, repo;
    if (options == null) {
      options = {};
    }
    if (options) {
      repo = document.createElement('li');
      Utils.addClassName(repo, 'repo-list-item');
      name = document.createElement('h3');
      Utils.addClassName(name, 'repo-list-name');
      nameURL = document.createElement('a');
      nameURL.setAttribute('href', options.url);
      nameURL.innerHTML = options.name;
      name.appendChild(nameURL);
      description = document.createElement('p');
      Utils.addClassName(description, 'repo-list-description');
      description.innerHTML = options.description;
      owner = document.createElement('p');
      Utils.addClassName(owner, 'repo-list-meta');
      ownerURL = document.createElement('a');
      ownerURL.setAttribute('href', options.ownerURL);
      ownerURL.innerHTML = options.owner;
      owner.innerHTML = 'Owner ';
      owner.appendChild(ownerURL);
      repo.appendChild(name);
      repo.appendChild(description);
      repo.appendChild(owner);
      return repo;
    }
  };

  return Stars;

})();

document.addEventListener('DOMContentLoaded', new Stars);
