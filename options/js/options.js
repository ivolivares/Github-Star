// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var Options, Utils;

  Node.prototype.prependChild = function(el) {
    return this.childNodes[1] && this.insertBefore(el, this.childNodes[1]) || this.appendChild(el);
  };

  Utils = {
    $: function(id) {
      return document.getElementById(id);
    },
    bind: function(el, type, handler) {
      var e;
      try {
        if (el.addEventListener) {
          return el.addEventListener(type, handler, false);
        } else if (el.attachEvent) {
          return el.attachEvent("on" + type, handler);
        }
      } catch (_error) {
        e = _error;
      }
    },
    insertAfter: function(newNode, referenceNode) {
      return referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
    },
    setTimeout: function(t, cb) {
      return window.setTimeout(cb, t);
    },
    trigger: function(element, eventName) {
      var event;
      if (eventName) {
        event = document.createEvent('HTMLEvents');
        event.initEvent(eventName, true, false);
        return element != null ? typeof element.dispatchEvent === "function" ? element.dispatchEvent(event) : void 0 : void 0;
      }
    }
  };

  Options = (function() {
    function Options() {
      var _ref;
      this.UI = {
        button: {
          save: Utils.$('apply-settings'),
          reset: Utils.$('reset-settings')
        },
        input: {
          username: Utils.$('github-username')
        },
        section: (_ref = document.getElementsByTagName('section')) != null ? _ref[0] : void 0
      };
      this.init();
    }

    Options.prototype.init = function() {
      this.restoreOptions();
      return this.setBindings();
    };

    Options.prototype.setBindings = function() {
      Utils.bind(this.UI.button.save, 'click', (function(_this) {
        return function() {
          var username;
          username = _this.UI.input.username.value;
          if (username) {
            return _this.saveOptions(username);
          } else {
            return _this.showMessage('Please enter your github username.', 10000);
          }
        };
      })(this));
      Utils.bind(this.UI.button.reset, 'click', (function(_this) {
        return function() {
          return _this.saveOptions();
        };
      })(this));
      return Utils.bind(this.UI.input.username, 'keydown', (function(_this) {
        return function(e) {
          if (e.wihch || e.keyCode === 13) {
            return Utils.trigger(_this.UI.button.save, 'click');
          }
        };
      })(this));
    };

    Options.prototype.saveOptions = function(username) {
      if (username == null) {
        username = '';
      }
      chrome.storage.sync.set({
        githubUsername: username
      }, (function(_this) {
        return function() {
          _this.UI.input.username.value = username;
          return _this.showMessage('Options saved.', 5000);
        };
      })(this));
      return chrome.storage.local.set({
        'githubUsername': username
      });
    };

    Options.prototype.restoreOptions = function() {
      return chrome.storage.sync.get({
        githubUsername: ''
      }, (function(_this) {
        return function(items) {
          return _this.UI.input.username.value = items.githubUsername || '';
        };
      })(this));
    };

    Options.prototype.showMessage = function(message, timeout) {
      var div;
      this.removeMessage();
      div = document.createElement('div');
      div.setAttribute('class', 'message');
      div.innerHTML = message || '';
      Utils.insertAfter(div, this.UI.section.previousElementSibling);
      if (timeout) {
        return Utils.setTimeout(timeout, (function(_this) {
          return function() {
            return _this.removeMessage();
          };
        })(this));
      }
    };

    Options.prototype.removeMessage = function() {
      var _ref, _ref1;
      return (_ref = document.getElementsByClassName('message')) != null ? (_ref1 = _ref[0]) != null ? typeof _ref1.remove === "function" ? _ref1.remove() : void 0 : void 0 : void 0;
    };

    return Options;

  })();

  document.addEventListener('DOMContentLoaded', new Options);

}).call(this);
